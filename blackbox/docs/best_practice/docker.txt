==================
CrateDB and Docker
==================

CrateDB and Docker_ are a great match thanks to CrateDB's shared-nothing,
horizontally scalable architecture that lends itself well to containerization.

This document covers the essentials of running CrateDB and Docker using the
official `CrateDB Docker image`_.

.. NOTE::

   If you're just getting started with CrateDB and Docker, check out our
   introductory guides for `running Docker locally`_ or `Docker Cloud`_.

Forming a Cluster
=================

To form a cluster, run a few instances of the ``crate`` image as a daemon:

.. code-block:: sh

    sh$ docker run -d crate crate

You should then see a few run ``crate`` containers:

.. code-block:: txt

    sh$ docker ps
    CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
    c3f581764a2e        crate               "/docker-entrypoin..."   5 seconds ago       Up 4 seconds        4200/tcp, 4300/tcp, 5432-5532/tcp   nifty_benz
    abdc731b9f2f        crate               "/docker-entrypoin..."   7 seconds ago       Up 6 seconds        4200/tcp, 4300/tcp, 5432-5532/tcp   keen_pike
    29944b0e4f99        crate               "/docker-entrypoin..."   11 seconds ago      Up 8 seconds        4200/tcp, 4300/tcp, 5432-5532/tcp   trusting_stallman

Grab one of those container IDs and get the IP address, like so:

.. code-block:: sh

    sh$ docker inspect --format='{{.NetworkSettings.IPAddress}}' c3f581764a2e
    172.17.0.5

Now, you can access the admin UI for that container by accessing it on port 4200
with your browser. In this instance, we would visit::

    http://172.17.0.5:4200/

To access the admin UI, map port 4200, and point your browser to port 4200 of
a node of your choice while you start it or look up its IP later:

.. code-block:: sh

    $ open "http://$(docker inspect --format='{{.NetworkSettings.IPAddress}}' $(docker run -d crate crate)):4200/admin"

For production use it's strongly recommended to use only one container per
machine. This will give the best possible performance and by mapping the ports
from the Docker container to the host it acts like a native installation.
Crate's default ports 4200 (HTTP) and 4300 (Transport protocol).

.. code-block:: sh

    $ docker run -d -p 4200:4200 -p 4300:4300 crate crate

Attach Persistent Data Directory
--------------------------------

Crate stores all important data in ``/data``. It's advised to mount this directory
to avoid writing within the docker image:

.. code-block:: sh

    $ docker run -d -v <data-dir>:/data crate crate

Use Custom Crate Configuration
------------------------------

Starting with 0.55.0, Crate does no longer support providing custom
configuration files. However it is still possible to mount Crate's configuration
into ``/crate/config/crate.yml``.

.. code-block:: sh

    $ docker run -d -v <custom/config/path>/crate.yml:/crate/config/crate.yml crate crate

For further configuration options refer to the Configuration_ section of our
documentation.


Environment and Runtime Constraints
-----------------------------------

It's very important that you set explicit runtime constraints because otherwise
the JVM can get confused when it is running inside Docker.

@@ todo how to calculate memory size for crate

Crate recognizes environment variables like `CRATE_HEAP_SIZE` that need to be
set with the `--env` option before the actual Crate core starts. As a rule of
thumb you may want to `assign about half of your memory`_ to Crate:


.. code-block:: sh

    $ docker run -d --env CRATE_HEAP_SIZE=32g crate crate

new:

.. code-block:: sh

    $ docker run -d -m 800M --env \
        JAVA_OPTIONS='-Xmx32g' \
        CRATE_HEAP_SIZE=32g \
        crate crate

https://developers.redhat.com/blog/2017/03/14/java-inside-docker/

Open Files
----------

Depending on the size of your installation, Crate can open a lot of files. You
can check the number of open files with ``ulimit -n``, but it can depend on your
host operating system. To increase the number, start containers with the
option ``--ulimit nofile=65535``. Furthermore it is recommended to set the
``memlock`` limit (the maximum locked-in-memory address space) to unlimited by
setting it to a very high number (Docker requires a 64 bit integer)
``--ulimit memlock=9223372036854775807``.

Multicast
---------

By Default, Crate uses multicast for node discovery. This means nodes started in
the same multicast zone will discover each other automatically. Docker multicast
support between containers on different hosts depends on an overlay network
driver. If that does not support multicast, you have to `enable unicast`_ in a
custom ``crate.yml`` file.


Crate publishes the hostname it runs on for discovery within the cluster. If the
address of the docker container differs from the actual host the docker image is
running on, this is the case if you do port mapping to the host via the `-p`
option, you need to tell Crate to publish the address of the docker host
instead:

.. code-block:: sh

    $ docker run -d -p 4200:4200 -p 4300:4300 \
        crate crate -Cnetwork.publish_host=host1.example.com

If you change the transport port from the default ``4300`` to something else,
you need to pass the publish port to Crate by adding
``-Ctransport.publish_port=4321`` to your command.

Crate Shell
-----------

The Crate Shell ``crash`` is bundled with the Docker image. Since the ``crash``
executable is already in the ``$PATH`` environment variable, simply run:

.. code-block:: sh

    $ docker run --rm -ti crate crash --hosts [host1, host2, ...]


Full Example
============

If you want to jump right in, here's a quick start example that could be used to
run CrateDB in a multi-host production environment.

This configuration includes:

- Volume mapping
- Port mapping to localhost (requires one container per host)
- Unicast host discovery

On the first host, run something like this:

.. code-block:: sh

    $ HOSTS="node1.example.com:4300,node2.example.com:4300,node3.example.com:4300"
    $ HOST="node1.example.com"
    $ docker run -d -p 4200:4200 -p 4300:4300 \
        --name crate1-container \
        --volume /mnt/data:/data \
        --ulimit nofile=65535 \
        --ulimit memlock=9223372036854775807 \
            crate \
            crate \
              -Ccluster.name=crate-cluster \
              -Cnode.name=crate1 \
              -Ctransport.publish_port=4300 \
              -Cnetwork.publish_host="$HOST" \
              -Cmulticast.enabled=false \
              -Cdiscovery.zen.ping.unicast.hosts="$HOSTS" \
              -Cdiscovery.zen.minimum_master_nodes=2

On each additional host, modify the ``HOST`` variable, and run the same command.

.. _assign about half of your memory: https://crate.io/docs/reference/en/latest/configuration.html#crate-heap-size
.. _Configuration: https://crate.io/docs/stable/configuration.html
.. _CrateDB Docker image: https://hub.docker.com/_/crate/
.. _Docker Cloud: https://crate.io/docs/install/containers/docker-cloud/
.. _Docker: https://www.docker.com/
.. _enable unicast: https://crate.io/docs/reference/best_practice/multi_node_setup.html
.. _running Docker locally: https://crate.io/docs/install/containers/docker/
